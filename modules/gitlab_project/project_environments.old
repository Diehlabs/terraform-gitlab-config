# -----------------------------------------------------------------------------
# Create environments for the project.
# https://registry.terraform.io/providers/gitlabhq/gitlab/latest/docs/resources/project_environment
# -----------------------------------------------------------------------------
resource "gitlab_project_environment" "non_prod" {
  for_each            = toset(local.deployment_environments.non_prod)
  project             = local.project.id
  name                = each.value
  stop_before_destroy = true
  # external_url      = try(each.value.external_url, "")
}

resource "gitlab_project_environment" "production" {
  for_each            = toset(local.deployment_environments.production)
  project             = local.project.id
  name                = each.value
  stop_before_destroy = true
  # external_url      = try(each.value.external_url, "")
}

# -----------------------------------------------------------------------------
# Create protected environments, aka define approvers for deployments.
# https://registry.terraform.io/providers/gitlabhq/gitlab/latest/docs/resources/project_protected_environment
# -----------------------------------------------------------------------------
resource "gitlab_project_protected_environment" "nonprod" {
  for_each                = gitlab_project_environment.non_prod
  project                 = each.value.project
  required_approval_count = 0
  environment             = each.value.name
  dynamic "deploy_access_levels" {
    for_each = toset(try(var.deploy_access_levels_nonprod.group_ids, []))
    content {
      group_id = each.key
    }
  }
    dynamic "deploy_access_levels" {
    for_each = toset(try(var.deploy_access_levels_nonprod.gitlab_roles, []))
    content {
      access_level = each.key
    }
  }
}

# resource "gitlab_project_protected_environment" "production" {
#   for_each                = gitlab_project_environment.production
#   project                 = each.value.project
#   required_approval_count = 1
#   environment             = each.value.name
#   dynamic "deploy_access_levels" {
#     for_each = toset(try(var.deploy_access_levels_production.group_ids, []))
#     content {
#       group_id = each.value
#     }
#   }
#   dynamic "deploy_access_levels" {
#     for_each = toset(try(var.deploy_access_levels_production.gitlab_roles, []))
#     content {
#       access_level = each.value
#     }
#   }
# }
